CREATE OR REPLACE PROCEDURE P_DM_FULL
(TABLE_NAME IN VARCHAR2,V_COMMITNUM IN INTEGER,IO_STATUS OUT INTEGER,IO_SQLERR OUT VARCHAR2 )
AS

  DM_TABLE_NAME VARCHAR2(125) :='DM_'||TABLE_NAME;  -- 表名(修改)
  ST_TABLE_NAME VARCHAR2(125) :='ST_'||TABLE_NAME;  -- 表名(修改)
  PROCEDURE_NAME VARCHAR2(125) :='P_'||DM_TABLE_NAME;  -- 存储过程名(修改)

  IO_ROW INTEGER :=0 ;  --插入条数
  ST_ROW INTEGER;  --源数据条数

  V_START_TIMESTAMP TIMESTAMP;  -- 加载开始时间
  V_END_TIMESTAMP TIMESTAMP;  -- 加载结束时间

  DM_TODAY NUMBER;        -- 数据日期"当日"
  DM_YESTERDAY NUMBER;  -- 数据日期"上一日"

  DM_SQL VARCHAR2(20000);  -- 存放SQL语句

  V_COUNT NUMBER;  --计数变量
 -- V_COMMITNUM CONSTANT NUMBER :=1000000;--一次提交记录数（默认一百万）
  
  --定义一个游标数据类型  
  TYPE emp_cursor_type IS REF CURSOR;  
  --声明一个游标变量  
  c1 EMP_CURSOR_TYPE;  
  --声明记录变量  
  V_DM_BRANCH DM_BRANCH%ROWTYPE;
  V_DM_CUSTOMER DM_CUSTOMER%ROWTYPE;
  V_DM_PRODUCT DM_PRODUCT%ROWTYPE;
  V_DM_ACCOUNT_DEP DM_ACCOUNT_DEP%ROWTYPE;
  V_DM_ACCOUNT_LOAN DM_ACCOUNT_LOAN%ROWTYPE;


BEGIN

  SELECT SYSDATE INTO V_START_TIMESTAMP  FROM dual;  -- 加载程序运行开始时间
  
  SELECT TX_DATE INTO DM_TODAY FROM MMAPST.ST_SYSTEM_DATE;  -- 取数据日期
		SELECT PRE_DATE INTO DM_YESTERDAY FROM MMAPST.ST_SYSTEM_DATE;  --取上一数据日期

  --查询ST层表中是否有'当日'数据
  DM_SQL := ' SELECT COUNT(1) FROM MMAPST.'||ST_TABLE_NAME||' WHERE PERIOD_ID='||DM_TODAY;
  EXECUTE  IMMEDIATE DM_SQL  INTO ST_ROW;
  IF ST_ROW>0
  THEN
  --备份"上日"数据
  --查询DM层表中是否有"上一日"数据，是否为重跑。
  DM_SQL := ' SELECT COUNT(1) FROM MMAPDM.'||DM_TABLE_NAME||' WHERE PERIOD_ID='||DM_YESTERDAY;
  EXECUTE  IMMEDIATE DM_SQL  INTO ST_ROW;
  IF ST_ROW>0
  THEN
    DM_SQL :='TRUNCATE TABLE MMAPDM.'||DM_TABLE_NAME||'_PRE' ;   -- 删除备份表中数据
    EXECUTE IMMEDIATE DM_SQL;
    COMMIT;
    DM_SQL :='INSERT INTO MMAPDM.'||DM_TABLE_NAME||'_PRE SELECT * FROM MMAPDM.'||DM_TABLE_NAME;   -- 备份表中数据
    EXECUTE IMMEDIATE DM_SQL;
    IO_ROW := IO_ROW+SQL%ROWCOUNT ;
    COMMIT;
  END IF;

--插入今日数据
BEGIN  
    
    --清空目标表
    DM_SQL :='TRUNCATE TABLE MMAPDM.'||DM_TABLE_NAME ; 
    EXECUTE IMMEDIATE DM_SQL;
    COMMIT;
    
    --获取取数SQL
    SELECT DMSQL INTO DM_SQL FROM MMAPDM.MMAPDM_PROC_SQL WHERE TABLE_NAME=DM_TABLE_NAME;
    
    --计数器初始化 
    V_COUNT  := 0;  
   
   --批量插入当日数据
    OPEN C1 FOR DM_SQL;
      LOOP
        --确定取数SQL
        IF DM_TABLE_NAME='DM_BRANCH'
        THEN
          FETCH C1 INTO V_DM_BRANCH;
          INSERT INTO DM_BRANCH VALUES V_DM_BRANCH;
          IO_ROW := IO_ROW+SQL%ROWCOUNT ;
          
        ELSIF DM_TABLE_NAME='DM_CUSTOMER'
        THEN
          FETCH C1 INTO V_DM_CUSTOMER;
          INSERT INTO DM_CUSTOMER VALUES V_DM_CUSTOMER;
          IO_ROW := IO_ROW+SQL%ROWCOUNT ;
          
        ELSIF DM_TABLE_NAME='DM_PRODUCT'
        THEN
          FETCH C1 INTO V_DM_PRODUCT;
          INSERT INTO DM_PRODUCT VALUES V_DM_PRODUCT;
          IO_ROW := IO_ROW+SQL%ROWCOUNT ;
          
        ELSIF DM_TABLE_NAME='DM_ACCOUNT_DEP'
        THEN
          FETCH C1 INTO V_DM_ACCOUNT_DEP;
          INSERT INTO DM_ACCOUNT_DEP VALUES V_DM_ACCOUNT_DEP;
          IO_ROW := IO_ROW+SQL%ROWCOUNT ;
          
        ELSIF DM_TABLE_NAME='DM_ACCOUNT_LOAN'
        THEN
          FETCH C1 INTO V_DM_ACCOUNT_LOAN;
          INSERT INTO DM_ACCOUNT_LOAN VALUES V_DM_ACCOUNT_LOAN;
          IO_ROW := IO_ROW+SQL%ROWCOUNT ;
          
        ELSE EXIT;
        END IF;
        
        IF ((MOD(V_COUNT, V_COMMITNUM)) = 0) THEN        
          COMMIT; 
        END IF;
        V_COUNT := V_COUNT + 1;
      EXIT WHEN C1%NOTFOUND;
        
      END LOOP;
      COMMIT;
      CLOSE C1;
END; 

END IF ;


  SELECT SYSDATE INTO V_END_TIMESTAMP FROM DUAL;  -- 加载程序运行结束时间

  IO_STATUS := 0 ;
  IO_SQLERR := 'SUSSCESS';
  P_MMAPDM_WRITE_LOGS(PROCEDURE_NAME,IO_STATUS,IO_ROW,V_START_TIMESTAMP,V_END_TIMESTAMP,IO_SQLERR);
  COMMIT;
  EXCEPTION
    WHEN OTHERS  THEN
  ROLLBACK;
  --恢复备份数据
  P_DM_FULL_ROLLBACK(DM_TABLE_NAME,IO_ROW);
  IO_STATUS := 9;
  IO_SQLERR := SQLCODE ||  SQLERRM;

  SELECT SYSDATE INTO V_END_TIMESTAMP FROM DUAL;
  P_MMAPDM_WRITE_LOGS(PROCEDURE_NAME,IO_STATUS,IO_ROW,V_START_TIMESTAMP,V_END_TIMESTAMP,IO_SQLERR);
END P_DM_FULL;
/
