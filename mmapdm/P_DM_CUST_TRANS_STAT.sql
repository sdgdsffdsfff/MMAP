CREATE OR REPLACE PROCEDURE "MMAPDM"."P_DM_CUST_TRANS_STAT"

AS
	VO_SQLERR  VARCHAR2(255);
	TABLE_NAME VARCHAR2(125) :='DM_CUST_TRANS_STAT'; -- table name
	PROCEDURE_NAME VARCHAR2(125) :='P_'||TABLE_NAME;  -- 存储过程名(修改)
	DM_SQL VARCHAR2(20000); -- the variable to loading the SQL statment 
	IO_ROW INTEGER;
	IO_STATUS INTEGER;
	V_ETL_DATE NUMBER;  -- 跑批日期
	V_START_TIMESTAMP TIMESTAMP;    --the start time of procedures
	V_END_TIMESTAMP   TIMESTAMP;    --the end time of procedures
	DM_TODAY NUMBER;        -- 
	TX_DATE NUMBER;
    DROP_TEMP VARCHAR(100) ;
BEGIN

  SELECT SYSDATE INTO V_START_TIMESTAMP FROM DUAL;    -- 加载程序运行开始时间
  SELECT TO_NUMBER(TO_CHAR((SYSDATE),'YYYYMMDD')) INTO V_ETL_DATE FROM dual;  -- 取系统日期作为跑批日期
  SELECT TX_DATE INTO DM_TODAY FROM MMAPST.ST_SYSTEM_DATE;  -- 取数据日期

/* update the new_flag field*/
UPDATE MMAPDM.DM_CUST_TRANS_STAT SET NEW_FLAG = '0';

/* create the temp table for inserting the dep_trans_flow  */
DM_SQL:='CREATE TABLE MMAPDM.TMP_DM_CUST_TRANS_STAT 
  AS (
  SELECT   A.TX_DATE,
    A.PERIOD_ID,
    CUSTOMER_ID,
    A.TRANSCDE_ID,
    CHN_ID,
    TRANSBR_ID,
    PRODTYP_ID,
    C.YEAR,
    C.QUARTER,
    C.MONTH,
    C.WEEKOFYEAR,
    C.DAYOFYEAR,
    C.DAYOFQUARTER,
    C.DAYOFMONTH,
    C.DAYOFWEEK,
    CUST_TRANS_AMT_LC,
    CUST_TRANS_CNT_LC
  FROM
  (
    SELECT   A.TX_DATE,
      A.PERIOD_ID,
      CUSTOMER_ID,
      A.TRANSCDE_ID,
      CHN_ID,
      TRANSBR_ID,
      PRODTYP_ID,
      SUM(TRANS_AMT1) AS CUST_TRANS_AMT_LC,
      COUNT(1) AS CUST_TRANS_CNT_LC
    FROM  MMAPDM.DM_DEP_TRANS_FLOW_HIS A 
    LEFT JOIN MMAPST.MID_TRANS_TYPE_IND B 
    ON  A.TRANSCDE_ID = B.TRANSCDE_ID
    GROUP BY A.TX_DATE,A.PERIOD_ID,A.CUSTOMER_ID,A.TRANSCDE_ID,A.CHN_ID,A.TRANSBR_ID,A.PRODTYP_ID
  ) A 
  LEFT JOIN MMAPST.MID_CALENDAR C 
  ON  A.PERIOD_ID=C.PERIOD_ID
  )';
  EXECUTE  IMMEDIATE DM_SQL;
  COMMIT;


/*
  2. delete the previous data


DELETE FROM MMAPDM.DM_CUST_TRANS_STAT
WHERE       FREQ_VALUE = (
        SELECT DISTINCT WEEKOFYEAR 
        FROM   MMAPST.MID_CALENDAR     
        WHERE  PERIOD_ID = (SELECT DISTINCT PERIOD_ID
                  FROM MMAPST.ST_CUST_BAL)        
          )
AND     PERIOD_ID = (
        SELECT DISTINCT PERIOD_ID - 1
        FROM MMAPST.ST_CUST_BAL
      )
AND     FREQ = 'W';
*/
/*
3. insert the current data
*/
DM_SQL :=
  'INSERT INTO DM_CUST_TRANS_STAT    
  (
  ETL_DATE
  ,TX_DATE
  ,PERIOD_ID
  ,CUSTOMER_ID
  ,TRANSTYP_ID
  ,FREQ
  ,YEAR
  ,FREQ_VALUE
  ,FREQ_DIFF
  ,CHANNEL
  ,TRANSBR_ID
  ,PROD_TYPE
  ,CUST_TRANS_AMT_LC
  ,CUST_TRANS_AMT_CWS_LC
  ,CUST_TRANS_AMT_SQT_LC
  ,CUST_TRANS_AMT_MAX_LC
  ,CUST_TRANS_AMT_MAX_DATE_LC
  ,CUST_TRANS_AMT_MIN_LC
  ,CUST_TRANS_AMT_MIN_DATE_LC
  ,CUST_TRANS_AMT_AVG_LC
  ,CUST_TRANS_AMT_AVG_CWS_LC
  ,CUST_TRANS_AMT_AVG_SQT_LC
  ,CUST_TRANS_CNT_LC
  ,CUST_TRANS_CNT_CWS_LC
  ,CUST_TRANS_CNT_SQT_LC
  ,CUST_TRANS_CNT_MAX_LC
  ,CUST_TRANS_CNT_MAX_DATE_LC
  ,CUST_TRANS_CNT_MIN_LC
  ,CUST_TRANS_CNT_MIN_DATE_LC
  ,CUST_TRANS_CNT_AVG_LC
  ,CUST_TRANS_CNT_AVG_CWS_LC
  ,CUST_TRANS_CNT_AVG_SQT_LC
  )
  
  SELECT  
  '|| V_ETL_DATE ||'
  ,A.TX_DATE
  ,A.PERIOD_ID
  ,A.CUSTOMER_ID
  ,A.TRANSCDE_ID
  ,''W''
  ,A.YEAR
  ,A.WEEKOFYEAR
  ,0
  ,A.CHN_ID
  ,A.TRANSBR_ID
  ,A.PRODTYP_ID
  
  /*
  RMB TRADE AMOUNT
  */
  ,NVL(A.CUST_TRANS_AMT_LC,0)+NVL(b.cust_trans_amt_lc,0) AS CUST_TRANS_AMT_LC       --RMB TRADE AMOUNT
  ,C.CUST_TRANS_AMT_LC AS CUST_TRANS_AMT_CWS_LC   --RMB TRADE AMOUNT IN CORRESPONDING PERIOD
  ,D.CUST_TRANS_AMT_LC AS CUST_TRANS_AMT_SQT_LC   --RMB TRADE AMOUNT IN PRIOR PERIOD
  
  --THE MAX VALUE FOR RMB TRADE AMOUNT 
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.CUST_TRANS_AMT_LC  
  ELSE         
  greatest(NVL(A.CUST_TRANS_AMT_LC,0),NVL(B.CUST_TRANS_AMT_LC,0)) END)   
  AS CUST_TRANS_AMT_MAX_LC
  --THE DATE OF RMB TRADE AMOUNT MAX VALUE
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.PERIOD_ID    
  ELSE        
  (CASE WHEN NVL(A.CUST_TRANS_AMT_LC,0) - NVL(B.CUST_TRANS_AMT_LC,0) > 0 THEN A.PERIOD_ID ELSE B.PERIOD_ID END) END)     
  AS CUST_TRANS_AMT_MAX_DATE_LC
  --THE MIN VALUE FOR RMB TRADE AMOUNT 
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.CUST_TRANS_AMT_LC    
  ELSE         
  least(NVL(A.CUST_TRANS_AMT_LC,0),NVL(B.CUST_TRANS_AMT_LC,0)) END)   
  AS CUST_TRANS_AMT_MIN_LC
  --THE DATE OF RMB TRADE AMOUNT MIN VALUE
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.PERIOD_ID    
  ELSE        
  (CASE WHEN NVL(A.CUST_TRANS_AMT_LC,0) - NVL(B.CUST_TRANS_AMT_LC,0) < 0 THEN A.PERIOD_ID ELSE B.PERIOD_ID END) END)     
  AS CUST_TRANS_AMT_MIN_DATE_LC  
  
  
  /*
  DAILY AVERAGE FOR RMB TRADE
  */
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.CUST_TRANS_AMT_LC
  ELSE         
  ((NVL(B.CUST_TRANS_AMT_LC,0) * (A.DAYOFWEEK-1) + NVL(A.CUST_TRANS_AMT_LC,0)) / A.DAYOFWEEK) END)  
  AS CUST_TRANS_AMT_AVG_LC
  --DAILY AVERAGE FOR RMB TRADE IN CORRESPONDING PERIOD     
  ,C.CUST_TRANS_CNT_LC  AS CUST_TRANS_AMT_AVG_CWS_LC
  --DAILY AVERAGE FOR RMB TRADE IN PRIOR PERIOD
  ,D.CUST_TRANS_CNT_LC  AS CUST_TRANS_AMT_AVG_SQT_LC                
  
  
  /*
  NUMBER OF TRANS FOR RMB TRADE
  */
  ,A.CUST_TRANS_CNT_LC AS CUST_TRANS_CNT_LC
  ,C.CUST_TRANS_CNT_LC AS CUST_TRANS_CNT_CWS_LC
  ,D.CUST_TRANS_CNT_LC AS CUST_TRANS_CNT_SQT_LC
  
  --THE MAX VALUE FOR NUMBER OF TRANS FOR RMB TRADE
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.CUST_TRANS_CNT_LC    
  ELSE         
  greatest(NVL(A.CUST_TRANS_CNT_LC,0),NVL(B.CUST_TRANS_CNT_LC,0)) END)   
  AS CUST_TRANS_CNT_MAX_LC
  --THE DATE OF MAX VALUE
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.PERIOD_ID    
  ELSE        
  (CASE WHEN NVL(A.CUST_TRANS_CNT_LC,0) - NVL(B.CUST_TRANS_CNT_LC,0) > 0 THEN A.PERIOD_ID ELSE B.PERIOD_ID END) END)         
  AS CUST_TRANS_CNT_MAX_DATE_LC
  --THE MIN VALUE FOR NUMBER OF TRANS FOR RMB TRADE
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.CUST_TRANS_AMT_LC    
  ELSE         
  least(NVL(A.CUST_TRANS_CNT_LC,0),NVL(B.CUST_TRANS_CNT_LC,0)) END)   
  AS CUST_TRANS_CNT_MIN_LC
  --THE DATE OF MIN VALUE
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.PERIOD_ID    
  ELSE        
  (CASE WHEN NVL(A.CUST_TRANS_CNT_LC,0) - NVL(B.CUST_TRANS_CNT_LC,0) < 0 THEN A.PERIOD_ID ELSE B.PERIOD_ID END) END)     
  AS CUST_TRANS_CNT_MIN_DATE
  
  /*
  DAILY AVERAGE FOR NUMBER OF TRANS FOR RMB TRADE
  */
  ,(CASE WHEN A.DAYOFWEEK = ''1'' THEN A.CUST_TRANS_CNT_LC    
  ELSE         
  ((NVL(B.CUST_TRANS_CNT_LC,0) * (A.DAYOFWEEK-1) + NVL(A.CUST_TRANS_CNT_LC,0)) / A.DAYOFWEEK) END)  
  AS CUST_TRANS_CNT_AVG_LC
  --DAILY AVERAGE FOR NUMBER OF TRANS IN CORRESPONDING PERIOD 
  ,c.CUST_TRANS_CNT_LC   AS CUST_TRANS_CNT_AVG_CWS_LC 
  --DAILY AVERAGE FOR NUMBER OF TRANS IN PRIOR PERIOD
  ,d.CUST_TRANS_CNT_LC   AS CUST_TRANS_CNT_AVG_SQT_LC 
  
  ------FOR MAX/MIN-------------------
  FROM TMP_DM_CUST_TRANS_STAT A
  LEFT JOIN DM_CUST_TRANS_STAT B
  ON 
  A.CUSTOMER_ID=B.CUSTOMER_ID
  AND
  A.TRANSCDE_ID=B.TransTyp_ID 
  AND
  A.CHN_ID=B.CHANNEL
  AND
  A.TransBr_ID=B.TRANSBR_ID
  AND
  A.PRODTYP_ID=B.PROD_TYPE
  AND
  A.YEAR=B.YEAR
  AND
  B.FREQ=''W''
  AND
  A.WEEKOFYEAR=B.FREQ_VALUE
  
  --FOR corresponding period---
  LEFT JOIN MMAPDM.DM_CUST_TRANS_STAT C
  ON 
  A.CUSTOMER_ID=C.CUSTOMER_ID
  AND
  A.TRANSCDE_ID=C.TransTyp_ID 
  AND
  A.CHN_ID=C.CHANNEL
  AND
  A.TransBr_ID=C.TRANSBR_ID
  AND
  A.PRODTYP_ID=C.PROD_TYPE
  AND
  A.YEAR - 1 = c.YEAR
  AND
  C.FREQ=''W''
  AND
  A.WEEKOFYEAR=C.FREQ_VALUE
  
  --FOR prior period---
  LEFT JOIN MMAPDM.DM_CUST_TRANS_STAT D
  ON 
  A.CUSTOMER_ID=D.CUSTOMER_ID
  AND
  A.TRANSCDE_ID=D.TransTyp_ID 
  AND
  A.CHN_ID=D.CHANNEL
  AND
  A.TransBr_ID=D.TRANSBR_ID
  AND
  A.PRODTYP_ID=D.PROD_TYPE
  AND
  A.YEAR=D.YEAR
  AND
  D.FREQ=''W''
  AND
  A.WEEKOFYEAR - 1 = D.FREQ_VALUE
  -------------------------
'
;
        EXECUTE IMMEDIATE DM_SQL;
        IO_ROW := SQL%ROWCOUNT ;
    COMMIT;
    
/*
  4. update the FREQ
*/

UPDATE  MMAPDM.DM_CUST_TRANS_STAT 
SET   FREQ_DIFF = FREQ_DIFF + 1 
WHERE   FREQ = 'W' 
AND   PROD_TYPE = 'TD'
AND     NEW_FLAG = '0'
;

/*
  5. delete the expire data(retain data 12 cyc for week-data)
*/

DELETE FROM MMAPDM.DM_CUST_TRANS_STAT
WHERE       FREQ_VALUE >= '12'
AND     FREQ = 'W';


/* delete the temp table*/
DROP_TEMP :='DROP TABLE MMAPDM.TMP_DM_CUST_TRANS_STAT' ; 
EXECUTE IMMEDIATE DROP_TEMP;


/* write the log info to db */

SELECT SYSDATE INTO V_END_TIMESTAMP   FROM dual;    -- 加载程序运行结束时间
IO_STATUS := 0 ;
VO_SQLERR := 'SUSSCESS';
P_MMAPDM_WRITE_LOGS(PROCEDURE_NAME,IO_STATUS,IO_ROW,V_START_TIMESTAMP,V_END_TIMESTAMP,VO_SQLERR);
COMMIT;
    
  EXCEPTION
    WHEN OTHERS THEN
  ROLLBACK ;
  IO_STATUS := 9 ;
  VO_SQLERR := SQLCODE ||  SQLERRM  ;
  SELECT SYSDATE INTO  V_END_TIMESTAMP  FROM dual;
  P_MMAPDM_WRITE_LOGS(PROCEDURE_NAME,IO_STATUS,IO_ROW,V_START_TIMESTAMP,V_END_TIMESTAMP,VO_SQLERR);
    
END P_DM_CUST_TRANS_STAT;
